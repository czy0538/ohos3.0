# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//ark/js_runtime/js_runtime_config.gni")
import("//build/ohos.gni")

action("build_llvm_libs") {
  script = "build_llvm.sh"
  sources = [ "//ark/js_runtime/ecmascript/compiler/build_llvm.sh" ]
  outputs = [ "${root_out_dir}/llvm" ]
}

config("include_llvm") {
  include_dirs = [
    "//third_party/llvm-project/llvm/include/",
    "//third_party/llvm-project/build/include",
    "//third_party/llvm-project/llvm/build/include",
  ]
}

config("ark_jsruntime_compiler_config") {
  configs = [ "//ark/js_runtime:ark_jsruntime_common_config" ]
}

ohos_shared_library("libark_jsoptimizer") {
  sources = [
    "circuit.cpp",
    "circuit_builder.cpp",
    "circuit_visualizer.cpp",
    "fastpath_optimizer.cpp",
    "gate.cpp",
    "llvm_ir_builder.cpp",
    "llvm_mcjit_compiler.cpp",
    "llvm_stackmap_parse.cpp",
    "scheduler.cpp",
    "stub_interface.cpp",
    "stub_optimizer.cpp",
    "type.cpp",
    "verifier.cpp",
  ]

  configs = [
    ":include_llvm",
    ":ark_jsruntime_compiler_config",
    "//ark/js_runtime:ark_jsruntime_public_config",
    "$ark_root/runtime:arkruntime_public_config",
  ]

  lib_dirs = [ "//third_party/llvm-project/build/lib" ]

  libs = [
    "stdc++",
    "z",
    "tinfo",
    "LTO",
    "LLVMTarget",
    "LLVMObject",
    "LLVMMC",
    "LLVMSupport",
    "LLVMCore",
    "LLVMExecutionEngine",
    "LLVMInterpreter",
    "LLVMMCJIT",
    "LLVMExegesis",
    "LLVMRuntimeDyld",
    "LLVMInstCombine",
    "LLVMAnalysis",
    "LLVMScalarOpts",
    "LLVMBinaryFormat",
    "LLVMDebugInfoDWARF",
    "LLVMRemarks",
    "LLVMTextAPI",
    "LLVMScalarOpts",
    "LLVMTransformUtils",
    "LLVMBitReader",
    "LLVMSystemZInfo",
    "LLVMAsmPrinter",
    "LLVMProfileData",
    "LLVMBitstreamReader",
    "LLVMSelectionDAG",
    "LLVMGlobalISel",
    "LLVMLTO",
    "LLVMCFGuard",
    "LLVMVectorize",
    "LLVMDemangle",
    "LLVMipo",
    "LLVMInstrumentation",
    "LLVMDebugInfoCodeView",
    "LLVMAggressiveInstCombine",
    "LLVMAsmParser",
    "LLVMMipsAsmParser",
    "LLVMMCParser",
    "LLVMMIRParser",
    "LLVMMSP430AsmParser",
    "LLVMX86Info",
    "LLVMAArch64Info",
    "LLVMLanaiInfo",
    "LLVMAMDGPUInfo",
    "LLVMARMInfo",
    "LLVMHexagonInfo",
    "LLVMNVPTXInfo",
    "LLVMRISCVInfo",
    "LLVMSparcInfo",
    "LLVMMipsInfo",
    "LLVMWebAssemblyInfo",
    "LLVMBPFInfo",
    "LLVMMSP430Info",
    "LLVMPowerPCInfo",
    "LLVMXCoreInfo",
    "LLVMARMDesc",
    "LLVMAArch64Desc",
    "LLVMSparcDesc",
    "LLVMAMDGPUDesc",
    "LLVMXCoreDesc",
    "LLVMWebAssemblyDesc",
    "LLVMNVPTXDesc",
    "LLVMMSP430Desc",
    "LLVMPowerPCDesc",
    "LLVMMipsDesc",
    "LLVMRISCVDesc",
    "LLVMLanaiDesc",
    "LLVMSystemZDesc",
    "LLVMHexagonDesc",
    "LLVMX86Desc",
    "LLVMBPFDesc",
    "LLVMSparcDisassembler",
    "LLVMRISCVDisassembler",
    "LLVMMipsDisassembler",
    "LLVMXCoreDisassembler",
    "LLVMPowerPCDisassembler",
    "LLVMX86Disassembler",
    "LLVMMSP430Disassembler",
    "LLVMARMDisassembler",
    "LLVMLanaiDisassembler",
    "LLVMAArch64Disassembler",
    "LLVMBPFDisassembler",
    "LLVMSystemZDisassembler",
    "LLVMMCDisassembler",
    "LLVMWebAssemblyDisassembler",
    "LLVMHexagonDisassembler",
    "LLVMAMDGPUDisassembler",
    "LLVMXCoreCodeGen",
    "LLVMPowerPCCodeGen",
    "LLVMNVPTXCodeGen",
    "LLVMAArch64CodeGen",
    "LLVMMSP430CodeGen",
    "LLVMARMCodeGen",
    "LLVMMipsCodeGen",
    "LLVMSparcCodeGen",
    "LLVMBPFCodeGen",
    "LLVMHexagonCodeGen",
    "LLVMAMDGPUCodeGen",
    "LLVMRISCVCodeGen",
    "LLVMWebAssemblyCodeGen",
    "LLVMSystemZCodeGen",
    "LLVMCodeGen",
    "LLVMX86CodeGen",
    "LLVMLanaiCodeGen",
    "LLVMX86AsmParser",
    "LLVMAMDGPUUtils",
    "LLVMRISCVUtils",
    "LLVMTransformUtils",
    "LLVMAArch64Utils",
    "LLVMARMUtils",
    "LLVMX86Utils",
  ]

  deps = [
    ":build_llvm_libs",
    "$ark_root/libpandabase:libarkbase",
    "//ark/js_runtime:libark_jsruntime",
  ]

  output_extension = "so"
  relative_install_dir = "ark"
  subsystem_name = "ark"
}
