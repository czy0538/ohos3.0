# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

definitions: []
tests:
  - file-name: "mod"
    isa:
      title: Three address integer division or modulo
      description: Perform integer division or modulo on two registers and store result into accumulator
    commands:
      - file-name: "op_v1_4_v2_4_zero"
        isa:
          instructions:
            - sig: mod v1:in:i32, v2:in:i32
              acc: out:i32
              format: [op_v1_4_v2_4]
        code-template: |
          #
              movi v0, 0
              movi v1, %s
              mod v0, v1
              movi v0, 0
              jne v0, set_failure
              ldai 0
              jmp fall_through
          set_failure:
              ldai 1
          fall_through:
        description: Check mod with zero and various values.
        cases:
          - values: ["1"]
          - values: ["-1"]
          - values: ["0x7FFFFFFF"]
          - values: ["0x80000000"]
          - values: ["-0x7FFFFFFF"]
          - values: ["-0x80000000"]
          - values: ["0xFFFFFFFF"]
          - values: ["-0xFFFFFFFF"]

      - file-name: "op_vs_8_pone"
        isa:
          instructions:
            - sig: mod v1:in:i32, v2:in:i32
              acc: out:i32
              format: [op_v1_4_v2_4]
        code-template: |
          #
              movi v0, 1
              movi v1, %s
              mod v0, v1
              movi v0, %s
              jne v0, set_failure
              ldai 0
              jmp fall_through
          set_failure:
              ldai 1
          fall_through:
        description: Check mod with +1 and various values.
        cases:
          - values: ["1", "0x0"]
          - values: ["-1", "0x0"]
          - values: ["0x7FFFFFFF", "0x1"]
          - values: ["-0x7FFFFFFF", "0x1"]
          - values: ["0x80000000", "0x1"]
          - values: ["-0x80000000", "0x1"]
          - values: ["0xFFFFFFFF", "0x0"]
          - values: ["-0xFFFFFFFF", "0x0"]

      - file-name: "op_vs_8_none"
        isa:
          instructions:
            - sig: mod v1:in:i32, v2:in:i32
              acc: out:i32
              format: [op_v1_4_v2_4]
        code-template: |
          #
              movi v0, -1
              movi v1, %s
              mod v0, v1
              movi v0, %s
              jne v0, set_failure
              ldai 0
              jmp fall_through
          set_failure:
              ldai 1
          fall_through:
        description: Check mod with -1 and various values.
        cases:
          - values: ["1", "0x0"]
          - values: ["-1", "0x0"]
          - values: ["0x7FFFFFFF", "0xFFFFFFFF"]
          - values: ["-0x7FFFFFFF", "0xFFFFFFFF"]
          - values: ["0x80000000", "0xFFFFFFFF"]
          - values: ["-0x80000000", "0xFFFFFFFF"]
          - values: ["0xFFFFFFFF", "0x0"]
          - values: ["-0xFFFFFFFF", "0x0"]

      - file-name: "op_vs_8_pmax"
        isa:
          instructions:
            - sig: mod v1:in:i32, v2:in:i32
              acc: out:i32
              format: [op_v1_4_v2_4]
        code-template: |
          #
              movi v0, 0x7FFFFFFF
              movi v1, %s
              mod v0, v1
              movi v0, %s
              jne v0, set_failure
              ldai 0
              jmp fall_through
          set_failure:
              ldai 1
          fall_through:
        description: Check mod with +max and various values.
        cases:
          - values: ["1", "0x0"]
          - values: ["-1", "0x0"]
          - values: ["0x7FFFFFFF", "0x0"]
          - values: ["-0x7FFFFFFF", "0x0"]
          - values: ["0x80000000", "0x7FFFFFFF"]
          - values: ["-0x80000000", "0x7FFFFFFF"]
          - values: ["0xFFFFFFFF", "0x0"]
          - values: ["-0xFFFFFFFF", "0x0"]

      - file-name: "op_vs_8_nmax"
        isa:
          instructions:
            - sig: mod v1:in:i32, v2:in:i32
              acc: out:i32
              format: [op_v1_4_v2_4]
        code-template: |
          #
              movi v0, -0x80000000
              movi v1, %s
              mod v0, v1
              movi v0, %s
              jne v0, set_failure
              ldai 0
              jmp fall_through
          set_failure:
              ldai 1
          fall_through:
        description: Check mod with -max and various values.
        cases:
          - values: ["1", "0x0"]
          - values: ["-1", "0x0"]
          - values: ["0x7FFFFFFF", "0xFFFFFFFF"]
          - values: ["-0x7FFFFFFF", "0xFFFFFFFF"]
          - values: ["0x80000000", "0x0"]
          - values: ["-0x80000000", "0x0"]
          - values: ["0xFFFFFFFF", "0x0"]
          - values: ["-0xFFFFFFFF", "0x0"]

      - file-name: "vals"
        isa:
          instructions:
            - sig: mod v1:in:i32, v2:in:i32
              acc: out:i32
              format: [op_v1_4_v2_4]
        code-template: |
          #
              movi v0, %s
              movi v1, %s
              mod v0, v1
              movi v0, %s
              jne v0, set_failure
              ldai 0
              jmp fall_through
          set_failure:
              ldai 1
          fall_through:
        description: Check mod with various values.
        tags: ['tsan']
        cases:
          - values: ["0x87A8E1D9", "0x6D8935CF", "0xF53217A8"]
          - values: ["0x6AFB709C", "0xD7328FDF", "0x1960905A"]
          - values: ["0x91AD1CA9", "0x330B9F8D", "0xF7C45BC3"]
          - values: ["0xC5EA3D60", "0x40FCDDC1", "0xC5EA3D60"]
          - values: ["0x63F6803C", "0x616041E0", "0x2963E5C"]
          - values: ["0x1E0384B", "0x7C662C8", "0x1E0384B"]
          - values: ["0x3CFC06FC", "0x54EF2076", "0x3CFC06FC"]
          - values: ["0x47CB3788", "0x35782ACF", "0x12530CB9"]
          - values: ["0x2680767A", "0x4E618FD7", "0x2680767A"]
          - values: ["0x817E8C9D", "0xB92B1E1B", "0xC8536E82"]
          - values: ["0x80000000", "-1", "0"]
          - values: ["-2147483648", "-1", "0"]

      - file-name: "op_v1_4_v2_4_exception"
        isa:
          instructions:
            - sig: mod v1:in:i32, v2:in:i32
              acc: out:i32
              format: [op_v1_4_v2_4]
          exceptions:
            - x_arith
        header-template: [ArithmeticException, main]
        code-template: |
            #
                movi v0, %s
                movi v1, 0
            begin:
                mod v0, v1
            end:
                ldai 1 # Should not reach this line
                return

            catch_AE:
                ldai 0 # Expected panda.ArithmeticException
                return

            catch_all:
                ldai 1 # Unexpected exception, test failed
                return

            .catch panda.ArithmeticException, begin, end, catch_AE
            .catchall begin, end, catch_all
        check-type: none
        description: Check `mod` throws ArithmeticException when divides by zero.
        cases:
          - values: ["0"]
          - values: ["1"]
          - values: ["0x7FFFFFFF"]
          - values: ["0x80000000"]
          - values: ["0xFFFFFFFF"]
          - values: ["-1"]
          - values: ["-0x7FFFFFFF"]
          - values: ["-0x80000000"]
          - values: ["-0xFFFFFFFF"]

      - file-name: "regs"
        isa:
          instructions:
            - sig: mod v1:in:i32, v2:in:i32
              acc: out:i32
              format: [op_v1_4_v2_4]
        runner-options: ['compile-only']
        code-template: |
          #
              mod %s, %s
        check-type: none
        description: Check mod with various register numbers.
        cases:
          - values: ["v15", "v15"]
          - values: ["v0", "v15"]
          - values: ["v15", "v0"]
          - values: ["v15", "v16"]
            runner-options: ['compile-failure']
          - values: ["v16", "v15"]
            runner-options: ['compile-failure']
          - values: ["v16", "v16"]
            runner-options: ['compile-failure']

      - file-name: type_v2
        # These tests will be removed due to verifier tests cover these cases.
        bugid: ["964", "966"]
        tags: ["verifier"]
        isa:
          instructions:
            - sig: mod v1:in:i32, v2:in:i32
              acc: out:i32
              format: [op_v1_4_v2_4]
          verification:
            - v2_type
        runner-options: ['verifier-failure', 'verifier-debug-config']
        code-template: |
          #
              movi v0, 1
              %s
              sta v1
              mod v0, v1
              ldai 0
              return
        check-type: no-check
        description: Check mod with incorrect second register type.
        cases:
          - values: [lda.str ""]
          - values: [lda.str "some string"]
          - values: [lda.null]
          - values: [fldai.64 0.0]
          - values: [fldai.64 -0.0]
          - values: [fldai.64 1.0]
          - values: [fldai.64 -1.0]
          - values: [fldai.64 0x7FF8000000000000]
          - values: [fldai.64 0xFFFFFFFFFFFFFFFF]
          - values: [fldai.64 0x7FF0000000000000]
          - values: [fldai.64 0xFFF0000000000000]
          - values: [fldai.64 0xFFEFFFFFFFFFFFFF]
          - values: [fldai.64 0x7FEFFFFFFFFFFFFF]
          - values: [fldai.64 0x0000000000000001]
          - values: [fldai.64 0x8000000000000001]
          - values: [fldai.64 3.14159265358979323846]
          - values: [ldai.64 0]
          - values: [ldai.64 1]
          - values: [ldai.64 -1]
          - values: [ldai.64 0x0000000100000000]
          - values: [ldai.64 0x0000000080000000]
          - values: [ldai.64 0x8000000000000000]
          - values: [ldai.64 0xFFFFFFFF00000000]
          - values: [ldai.64 0xFFFFFFFFFFFFFFFF]

      - file-name: type_v1
        # These tests will be removed due to verifier tests cover these cases.
        bugid: ["964", "966"]
        tags: ["verifier"]
        isa:
          instructions:
            - sig: mod v1:in:i32, v2:in:i32
              acc: out:i32
              format: [op_v1_4_v2_4]
          verification:
            - v1_type
        runner-options: ['verifier-failure', 'verifier-debug-config']
        code-template: |
          #
              %s
              sta v0
              movi v1, 1
              mod v0, v1
              ldai 0
              return
        check-type: no-check
        description: Check mod with incorrect first register type.
        cases:
          - values: [lda.str ""]
          - values: [lda.str "some string"]
          - values: [lda.null]
          - values: [fldai.64 0.0]
          - values: [fldai.64 -0.0]
          - values: [fldai.64 1.0]
          - values: [fldai.64 -1.0]
          - values: [fldai.64 0x7FF8000000000000]
          - values: [fldai.64 0xFFFFFFFFFFFFFFFF]
          - values: [fldai.64 0x7FF0000000000000]
          - values: [fldai.64 0xFFF0000000000000]
          - values: [fldai.64 0xFFEFFFFFFFFFFFFF]
          - values: [fldai.64 0x7FEFFFFFFFFFFFFF]
          - values: [fldai.64 0x0000000000000001]
          - values: [fldai.64 0x8000000000000001]
          - values: [fldai.64 3.14159265358979323846]
          - values: [ldai.64 0]
          - values: [ldai.64 1]
          - values: [ldai.64 -1]
          - values: [ldai.64 0x0000000100000000]
          - values: [ldai.64 0x0000000080000000]
          - values: [ldai.64 0x8000000000000000]
          - values: [ldai.64 0xFFFFFFFF00000000]
          - values: [ldai.64 0xFFFFFFFFFFFFFFFF]

      - file-name: type_obj_v1
        bugid: ["964", "966"]
        tags: ["verifier"]
        isa:
          instructions:
            - sig: mod v1:in:i32, v2:in:i32
              acc: out:i32
              format: [op_v1_4_v2_4]
          verification:
            - v1_type
        runner-options: ['verifier-failure', 'verifier-debug-config']
        description: Check mod with incorrect first register type.
        code-template: |
          #
          .record Object {}
          .function i32 main() {
              %s

              movi v1, 1
              mod v0, v1
              ldai 0
              return
        check-type: none
        header-template: []
        cases:
          - values:
            - |
              lda.type Object
              sta.obj v0
          - values:
            - newobj v0, Object

      - file-name: type_obj_v2
        bugid: ["964", "966"]
        tags: ["verifier"]
        isa:
          instructions:
            - sig: mod v1:in:i32, v2:in:i32
              acc: out:i32
              format: [op_v1_4_v2_4]
          verification:
            - v2_type
        runner-options: ['verifier-failure', 'verifier-debug-config']
        description: Check mod with incorrect second register type.
        code-template: |
          #
          .record Object {}
          .function i32 main() {
              movi v0, 1
              %s
              mod v0, v1
              ldai 0
              return
        check-type: none
        header-template: []
        cases:
          - values:
            - |
              lda.type Object
              sta.obj v1
          - values:
            - newobj v1, Object
