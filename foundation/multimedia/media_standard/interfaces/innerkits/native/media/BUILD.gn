# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

MEIDA_ROOT_DIR = "//foundation/multimedia/media_standard"

config("media_client_local_config") {
  include_dirs = [
    "$MEIDA_ROOT_DIR/services/services/sa_media/client",
    "$MEIDA_ROOT_DIR/services/services/player/server",
    "$MEIDA_ROOT_DIR/services/services/recorder/server",
    "$MEIDA_ROOT_DIR/services/services/avmetadatahelper/server",
    "$MEIDA_ROOT_DIR/services/services/factory",
    "$MEIDA_ROOT_DIR/services/services/engine_intf",
  ]
}

config("media_client_ipc_config") {
  include_dirs = [
    "$MEIDA_ROOT_DIR/services/services/sa_media/client",
    "$MEIDA_ROOT_DIR/services/services/sa_media/ipc",
    "$MEIDA_ROOT_DIR/services/services/player/client",
    "$MEIDA_ROOT_DIR/services/services/player/ipc",
    "$MEIDA_ROOT_DIR/services/services/media_data_source/ipc",
    "$MEIDA_ROOT_DIR/services/services/recorder/client",
    "$MEIDA_ROOT_DIR/services/services/recorder/ipc",
    "$MEIDA_ROOT_DIR/services/services/avmetadatahelper/client",
    "$MEIDA_ROOT_DIR/services/services/avmetadatahelper/ipc",
    "$MEIDA_ROOT_DIR/services/services/common",
  ]
}

config("media_client_public_config") {
  include_dirs = [
    "$MEIDA_ROOT_DIR/frameworks/innerkitsimpl/native/player",
    "$MEIDA_ROOT_DIR/frameworks/innerkitsimpl/native/recorder",
    "$MEIDA_ROOT_DIR/frameworks/innerkitsimpl/native/avmetadatahelper",
    "$MEIDA_ROOT_DIR/interfaces/innerkits/native/media/include",
    "$MEIDA_ROOT_DIR/services/include",
    "$MEIDA_ROOT_DIR/services/utils/include",
    "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
    "//utils/system/safwk/native/include",
    "//utils/native/base/include"
  ]

  cflags = [
    "-std=c++17",
    "-fno-rtti",
    "-fno-exceptions",
    "-Wall",
    "-fno-common",
    "-fstack-protector-strong",
    "-Wshadow",
    "-FPIC",
    "-FS",
    "-O2",
    "-D_FORTIFY_SOURCE=2",
    "-fvisibility=hidden",
    "-Wformat=2",
    "-Wdate-time",
  ]

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
}

ohos_shared_library("media_client") {
    install_enable = true
    sources = [
        "$MEIDA_ROOT_DIR/frameworks/innerkitsimpl/native/player/player_impl.cpp",
        "$MEIDA_ROOT_DIR/frameworks/innerkitsimpl/native/recorder/recorder_impl.cpp",
        "$MEIDA_ROOT_DIR/frameworks/innerkitsimpl/native/avmetadatahelper/avmetadatahelper_impl.cpp",
        "$MEIDA_ROOT_DIR/services/services/sa_media/client/media_client.cpp",
        "$MEIDA_ROOT_DIR/services/services/sa_media/ipc/media_service_proxy.cpp",
        "$MEIDA_ROOT_DIR/services/services/sa_media/ipc/media_listener_stub.cpp",
        "$MEIDA_ROOT_DIR/services/services/player/client/player_client.cpp",
        "$MEIDA_ROOT_DIR/services/services/player/ipc/player_service_proxy.cpp",
        "$MEIDA_ROOT_DIR/services/services/player/ipc/player_listener_stub.cpp",
        "$MEIDA_ROOT_DIR/services/services/media_data_source/ipc/media_data_source_stub.cpp",
        "$MEIDA_ROOT_DIR/services/services/recorder/client/recorder_client.cpp",
        "$MEIDA_ROOT_DIR/services/services/recorder/ipc/recorder_service_proxy.cpp",
        "$MEIDA_ROOT_DIR/services/services/recorder/ipc/recorder_listener_stub.cpp",
        "$MEIDA_ROOT_DIR/services/services/avmetadatahelper/client/avmetadatahelper_client.cpp",
        "$MEIDA_ROOT_DIR/services/services/avmetadatahelper/ipc/avmetadatahelper_service_proxy.cpp",
        "$MEIDA_ROOT_DIR/services/services/common/avsharedmemory_ipc.cpp",
        "$MEIDA_ROOT_DIR/services/utils/avsharedmemorybase.cpp",
        "$MEIDA_ROOT_DIR/frameworks/innerkitsimpl/native/common/media_errors.cpp",
    ]

    public_configs = [
        ":media_client_ipc_config",
        ":media_client_public_config",
        "//foundation/graphic/standard/frameworks/surface:surface_public_config"
    ]

    deps = [
        "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog",
        "//utils/native/base:utils",
        "//utils/native/base:utilsecurec",
        "//foundation/graphic/standard/frameworks/surface:surface",
    ]

    external_deps = [
        "ipc:ipc_core",
        "samgr_L2:samgr_proxy",
        "hiviewdfx_hilog_native:libhilog",
    ]
    subsystem_name = "multimedia"
    part_name = "multimedia_media_standard"
}

ohos_shared_library("media_local") {
    install_enable = true
    sources = [
        "$MEIDA_ROOT_DIR/frameworks/innerkitsimpl/native/player/player_impl.cpp",
        "$MEIDA_ROOT_DIR/frameworks/innerkitsimpl/native/recorder/recorder_impl.cpp",
        "$MEIDA_ROOT_DIR/frameworks/innerkitsimpl/native/avmetadatahelper/avmetadatahelper_impl.cpp",
        "$MEIDA_ROOT_DIR/services/services/sa_media/client/media_local.cpp",
        "$MEIDA_ROOT_DIR/services/services/player/server/player_server.cpp",
        "$MEIDA_ROOT_DIR/services/services/recorder/server/recorder_server.cpp",
        "$MEIDA_ROOT_DIR/services/services/avmetadatahelper/server/avmetadatahelper_server.cpp",
        "$MEIDA_ROOT_DIR/services/services/factory/engine_factory_repo.cpp",
        "$MEIDA_ROOT_DIR/frameworks/innerkitsimpl/native/common/media_errors.cpp",
    ]

    public_configs = [
        ":media_client_local_config",
        ":media_client_public_config",
        "//foundation/graphic/standard/frameworks/surface:surface_public_config"
    ]

    deps = [
        "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog",
        "//utils/native/base:utils",
        "//utils/native/base:utilsecurec",
        "//foundation/graphic/standard/frameworks/surface:surface",
        "$MEIDA_ROOT_DIR/services/utils:media_service_utils",
    ]

    external_deps = [
        "hiviewdfx_hilog_native:libhilog",
        "bytrace_standard:bytrace_core",
        "ipc:ipc_core",
    ]
    subsystem_name = "multimedia"
    part_name = "multimedia_media_standard"
}
