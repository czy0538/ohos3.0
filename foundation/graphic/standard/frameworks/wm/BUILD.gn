# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

## Build wms_client.so {{{
config("wms_client_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "include",
    "include/client",
    "//utils/system/safwk/native/include",
  ]

  cflags = [
    "-Wall",
    "-Werror",
    "-g3",
  ]
}

config("wms_client_public_config") {
  include_dirs = [
    "//foundation/graphic/standard/interfaces/innerkits",
    "//foundation/graphic/standard/interfaces/innerkits/wm",
    "//foundation/graphic/standard/interfaces/innerkits/common",
  ]
}

ohos_shared_library("wms_client") {
  sources = [
    "src/client/video_window.cpp",
    "src/client/window_manager.cpp",
    "src/client/window_manager_controller_client.cpp",
    "src/input_listener_manager.cpp",
    "src/log_listener.cpp",
    "src/multimodal_listener_manager.cpp",
    "src/singleton_container.cpp",
    "src/tester.cpp",
    "src/wayland_service.cpp",
    "src/window_manager_server.cpp",
    "src/wl_buffer.cpp",
    "src/wl_buffer_cache.cpp",
    "src/wl_display.cpp",
    "src/wl_dma_buffer_factory.cpp",
    "src/wl_shm_buffer.cpp",
    "src/wl_shm_buffer_factory.cpp",
    "src/wl_subsurface.cpp",
    "src/wl_subsurface_factory.cpp",
    "src/wl_surface.cpp",
    "src/wl_surface_factory.cpp",
    "src/wp_viewport.cpp",
    "src/wp_viewport_factory.cpp",
  ]

  configs = [
    ":wms_client_config",
    "//third_party/libdrm:libdrm_public_config",
  ]

  public_configs = [
    ":wms_client_public_config",
    "//third_party/libdrm:libdrm_public_config",
  ]

  deps = [
    "//foundation/graphic/standard:libwmservice",
    "//foundation/graphic/standard/frameworks/wmserver:wms_protocol",
    "//third_party/wayland-ivi-extension:libilmClient",
    "//third_party/wayland-ivi-extension:libilmCommon",
    "//third_party/wayland-ivi-extension:libilmControl",
    "//third_party/wayland-ivi-extension:libilmInput",
    "//third_party/wayland-protocols_standard:linux_dmabuf_unstable_v1_protocol",
    "//third_party/wayland-protocols_standard:viewporter_protocol",
    "//third_party/wayland_standard:libwayland_cursor",
    "//third_party/wayland_standard:wayland_core_protocol",
    "//third_party/weston:ivi_application_protocol",
    "//third_party/weston:libweston",
  ]

  if (target_cpu == "arm") {
    deps += [ "//foundation/multimedia/media_standard/frameworks/videodisplaymanager:videodisplaymanager" ]
    defines = [ "TARGET_CPU_ARM" ]
  } else {
    include_dirs = [
      "//foundation/multimedia/media_standard/frameworks/videodisplaymanager/include",
      "//drivers/peripheral/display/interfaces/include",
      "//drivers/peripheral/display/interfaces/hdi_cpp/client",
      "//drivers/adapter/uhdf2/hdi",
      "//drivers/adapter/uhdf2/include/hdi",
    ]
  }

  external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "samgr_L2:samgr_proxy",
  ]

  public_deps = [
    "//foundation/graphic/standard:libsurface",
    "//foundation/multimodalinput/input/interfaces/native/innerkits/event:mmi_event",
  ]

  part_name = "graphic_standard"
  subsystem_name = "graphic"
}

## Build wms_client.so }}}

## Build libwmclient.so {{{
config("libwmclient_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "include",
    "include/client",
    "//utils/system/safwk/native/include",
  ]

  cflags = [
    "-Wall",
    "-Werror",
    "-g3",
  ]
}

config("libwmclient_public_config") {
  include_dirs =
      [ "//foundation/graphic/standard/interfaces/innerkits/wmclient" ]
}

ohos_shared_library("libwmclient") {
  sources = [
    "src/input_listener_manager.cpp",
    "src/log_listener.cpp",
    "src/multimodal_listener_manager.cpp",
    "src/singleton_container.cpp",
    "src/static_call.cpp",
    "src/subwindow_normal_impl.cpp",
    "src/subwindow_option.cpp",
    "src/subwindow_option_impl.cpp",
    "src/subwindow_video_impl.cpp",
    "src/tester.cpp",
    "src/wayland_service.cpp",
    "src/window_attribute.cpp",
    "src/window_impl.cpp",
    "src/window_manager.cpp",
    "src/window_manager_impl.cpp",
    "src/window_manager_server.cpp",
    "src/window_option.cpp",
    "src/window_option_impl.cpp",
    "src/wl_buffer.cpp",
    "src/wl_buffer_cache.cpp",
    "src/wl_display.cpp",
    "src/wl_dma_buffer_factory.cpp",
    "src/wl_shm_buffer.cpp",
    "src/wl_shm_buffer_factory.cpp",
    "src/wl_subsurface.cpp",
    "src/wl_subsurface_factory.cpp",
    "src/wl_surface.cpp",
    "src/wl_surface_factory.cpp",
    "src/wp_viewport.cpp",
    "src/wp_viewport_factory.cpp",
  ]

  configs = [
    ":libwmclient_config",
    "//third_party/libdrm:libdrm_public_config",
  ]

  public_configs = [ ":libwmclient_public_config" ]

  deps = [
    "//foundation/graphic/standard:libwmservice",
    "//foundation/graphic/standard/frameworks/wmserver:wms_protocol",
    "//third_party/wayland-ivi-extension:libilmClient",
    "//third_party/wayland-ivi-extension:libilmCommon",
    "//third_party/wayland-ivi-extension:libilmControl",
    "//third_party/wayland-ivi-extension:libilmInput",
    "//third_party/wayland-protocols_standard:linux_dmabuf_unstable_v1_protocol",
    "//third_party/wayland-protocols_standard:viewporter_protocol",
    "//third_party/wayland_standard:libwayland_cursor",
    "//third_party/wayland_standard:wayland_core_protocol",
    "//third_party/weston:ivi_application_protocol",
    "//third_party/weston:libweston",
  ]

  if (target_cpu == "arm") {
    deps += [ "//foundation/multimedia/media_standard/frameworks/videodisplaymanager:videodisplaymanager" ]
    defines = [ "TARGET_CPU_ARM" ]
  } else {
    include_dirs = [
      "//foundation/multimedia/media_standard/frameworks/videodisplaymanager/include",
      "//drivers/peripheral/display/interfaces/include",
      "//drivers/peripheral/display/interfaces/hdi_cpp/client",
      "//drivers/adapter/uhdf2/hdi",
      "//drivers/adapter/uhdf2/include/hdi",
    ]
  }

  external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "samgr_L2:samgr_proxy",
  ]

  public_deps = [
    "//foundation/graphic/standard:libsurface",
    "//foundation/graphic/standard/utils:promise",
    "//foundation/multimodalinput/input/interfaces/native/innerkits/event:mmi_event",
  ]

  part_name = "graphic_standard"
  subsystem_name = "graphic"
}

## Build libwmclient.so }}}

group("test") {
  testonly = true

  deps = [ "test:test" ]
}
