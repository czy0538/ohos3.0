# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/aafwk/standard/aafwk.gni")

module_output_path = "aafwk_standard/abilitymgr"

ohos_unittest("ability_manager_test") {
  module_out_path = module_output_path

  sources = [
    "${services_path}/abilitymgr/src/ability_manager_client.cpp",
    "//foundation/aafwk/standard/services/abilitymgr/test/mock/libs/appexecfwk_core/src/appmgr/mock_app_scheduler.cpp",
    "ability_manager_test.cpp",
    "iservice_registry.cpp",
    "system_ability_manager.cpp",
    "system_ability_manager_stub.cpp",
  ]

  include_dirs = [
    "//foundation/aafwk/standard/interfaces/innerkits/ability_manager/include",
    "//utils/system/safwk/native/include",
    "//foundation/distributedschedule/samgr/services/samgr/native/include",
    "//foundation/aafwk/standard/services/abilitymgr/test/mock/libs/ability_scheduler_mock",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy/include/",
    "//foundation/aafwk/services/abilitymgr/test/mock/libs/ability_scheduler_mock/",
    "//foundation/distributedschedule/samgr/adapter/interfaces/innerkits/include/",
    "//foundation/distributeddatamgr/distributeddatamgr/interfaces/innerkits/app_distributeddata/include/",
    "//foundation/distributedschedule/samgr/adapter/interfaces/innerkits/include/",
    "//foundation/distributeddatamgr/distributeddatamgr/services/distributeddataservice/libs/distributeddb/communicator/include/",
    "//foundation/distributedschedule/samgr/utils/native/include/",
    "//foundation/communication/ipc/ipc/dnetwork_temp/",
  ]

  configs = [
    "${services_path}/abilitymgr:abilityms_config",
    "${services_path}/abilitymgr/test/mock:aafwk_mock_config",
  ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  deps = [
    "${innerkits_path}/want:want",
    "${services_path}/abilitymgr/test:abilityms_test_source",
    "${services_path}/abilitymgr/test/mock/libs/aakit:aakit_mock",
    "${services_path}/abilitymgr/test/mock/libs/appexecfwk_core:appexecfwk_appmgr_mock",
    "${services_path}/abilitymgr/test/mock/libs/appexecfwk_core:appexecfwk_bundlemgr_mock",
    "//foundation/aafwk/standard/frameworks/kits/ability/native:abilitykit_native",
    "//foundation/aafwk/standard/frameworks/kits/ability/native:dummy_classes",

    # "//foundation/appexecfwk/standard/interfaces/innerkits/appexecfwk_base:appexecfwk_base",
    # "//foundation/appexecfwk/standard/interfaces/innerkits/appexecfwk_core:appexecfwk_core",
    "//foundation/appexecfwk/standard/interfaces/innerkits/libeventhandler:libeventhandler",
    "//foundation/distributedschedule/dmsfwk/interfaces/innerkits/uri:zuri",
    "//foundation/distributedschedule/safwk/interfaces/innerkits/safwk:system_ability_fwk",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "ipc:libdbinder",
  ]
}

group("unittest") {
  testonly = true

  deps = [ ":ability_manager_test" ]
}
