diff --git a/cpp/QrCode.cpp b/cpp/QrCode.cpp
index b9de862..e7ae0c2 100755
--- a/cpp/QrCode.cpp
+++ b/cpp/QrCode.cpp
@@ -57,66 +57,14 @@ int QrSegment::Mode::numCharCountBits(int ver) const {
 }
 
 
-const QrSegment::Mode QrSegment::Mode::NUMERIC     (0x1, 10, 12, 14);
-const QrSegment::Mode QrSegment::Mode::ALPHANUMERIC(0x2,  9, 11, 13);
-const QrSegment::Mode QrSegment::Mode::BYTE        (0x4,  8, 16, 16);
-const QrSegment::Mode QrSegment::Mode::KANJI       (0x8,  8, 10, 12);
-const QrSegment::Mode QrSegment::Mode::ECI         (0x7,  0,  0,  0);
 
 
 QrSegment QrSegment::makeBytes(const vector<uint8_t> &data) {
-	if (data.size() > static_cast<unsigned int>(INT_MAX))
-		throw std::length_error("Data too long");
 	BitBuffer bb;
 	for (uint8_t b : data)
 		bb.appendBits(b, 8);
-	return QrSegment(Mode::BYTE, static_cast<int>(data.size()), std::move(bb));
-}
-
-
-QrSegment QrSegment::makeNumeric(const char *digits) {
-	BitBuffer bb;
-	int accumData = 0;
-	int accumCount = 0;
-	int charCount = 0;
-	for (; *digits != '\0'; digits++, charCount++) {
-		char c = *digits;
-		if (c < '0' || c > '9')
-			throw std::domain_error("String contains non-numeric characters");
-		accumData = accumData * 10 + (c - '0');
-		accumCount++;
-		if (accumCount == 3) {
-			bb.appendBits(static_cast<uint32_t>(accumData), 10);
-			accumData = 0;
-			accumCount = 0;
-		}
-	}
-	if (accumCount > 0)  // 1 or 2 digits remaining
-		bb.appendBits(static_cast<uint32_t>(accumData), accumCount * 3 + 1);
-	return QrSegment(Mode::NUMERIC, charCount, std::move(bb));
-}
-
-
-QrSegment QrSegment::makeAlphanumeric(const char *text) {
-	BitBuffer bb;
-	int accumData = 0;
-	int accumCount = 0;
-	int charCount = 0;
-	for (; *text != '\0'; text++, charCount++) {
-		const char *temp = std::strchr(ALPHANUMERIC_CHARSET, *text);
-		if (temp == nullptr)
-			throw std::domain_error("String contains unencodable characters in alphanumeric mode");
-		accumData = accumData * 45 + static_cast<int>(temp - ALPHANUMERIC_CHARSET);
-		accumCount++;
-		if (accumCount == 2) {
-			bb.appendBits(static_cast<uint32_t>(accumData), 11);
-			accumData = 0;
-			accumCount = 0;
-		}
-	}
-	if (accumCount > 0)  // 1 character remaining
-		bb.appendBits(static_cast<uint32_t>(accumData), 6);
-	return QrSegment(Mode::ALPHANUMERIC, charCount, std::move(bb));
+	Mode md(0x4, 8, 16, 16);
+	return QrSegment(md, static_cast<int>(data.size()), std::move(bb));
 }
 
 
@@ -124,10 +72,6 @@ vector<QrSegment> QrSegment::makeSegments(const char *text) {
 	// Select the most efficient segment encoding automatically
 	vector<QrSegment> result;
 	if (*text == '\0');  // Leave result empty
-	else if (isNumeric(text))
-		result.push_back(makeNumeric(text));
-	else if (isAlphanumeric(text))
-		result.push_back(makeAlphanumeric(text));
 	else {
 		vector<uint8_t> bytes;
 		for (; *text != '\0'; text++)
@@ -138,39 +82,12 @@ vector<QrSegment> QrSegment::makeSegments(const char *text) {
 }
 
 
-QrSegment QrSegment::makeEci(long assignVal) {
-	BitBuffer bb;
-	if (assignVal < 0)
-		throw std::domain_error("ECI assignment value out of range");
-	else if (assignVal < (1 << 7))
-		bb.appendBits(static_cast<uint32_t>(assignVal), 8);
-	else if (assignVal < (1 << 14)) {
-		bb.appendBits(2, 2);
-		bb.appendBits(static_cast<uint32_t>(assignVal), 14);
-	} else if (assignVal < 1000000L) {
-		bb.appendBits(6, 3);
-		bb.appendBits(static_cast<uint32_t>(assignVal), 21);
-	} else
-		throw std::domain_error("ECI assignment value out of range");
-	return QrSegment(Mode::ECI, 0, std::move(bb));
-}
-
-
-QrSegment::QrSegment(Mode md, int numCh, const std::vector<bool> &dt) :
-		mode(md),
-		numChars(numCh),
-		data(dt) {
-	if (numCh < 0)
-		throw std::domain_error("Invalid value");
-}
 
 
 QrSegment::QrSegment(Mode md, int numCh, std::vector<bool> &&dt) :
 		mode(md),
 		numChars(numCh),
 		data(std::move(dt)) {
-	if (numCh < 0)
-		throw std::domain_error("Invalid value");
 }
 
 
@@ -191,24 +108,6 @@ int QrSegment::getTotalBits(const vector<QrSegment> &segs, int version) {
 }
 
 
-bool QrSegment::isAlphanumeric(const char *text) {
-	for (; *text != '\0'; text++) {
-		if (std::strchr(ALPHANUMERIC_CHARSET, *text) == nullptr)
-			return false;
-	}
-	return true;
-}
-
-
-bool QrSegment::isNumeric(const char *text) {
-	for (; *text != '\0'; text++) {
-		char c = *text;
-		if (c < '0' || c > '9')
-			return false;
-	}
-	return true;
-}
-
 
 QrSegment::Mode QrSegment::getMode() const {
 	return mode;
@@ -225,8 +124,6 @@ const std::vector<bool> &QrSegment::getData() const {
 }
 
 
-const char *QrSegment::ALPHANUMERIC_CHARSET = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:";
-
 
 
 int QrCode::getFormatBits(Ecc ecl) {
@@ -235,48 +132,36 @@ int QrCode::getFormatBits(Ecc ecl) {
 		case Ecc::MEDIUM  :  return 0;
 		case Ecc::QUARTILE:  return 3;
 		case Ecc::HIGH    :  return 2;
-		default:  throw std::logic_error("Assertion error");
+		default:  return -1; //This scenario does not exist after adaptation.
 	}
 }
 
 
 QrCode QrCode::encodeText(const char *text, Ecc ecl) {
 	vector<QrSegment> segs = QrSegment::makeSegments(text);
-	return encodeSegments(segs, ecl);
+	return encodeSegments(segs, ecl, MIN_VERSION, MAX_VERSION, 5);
 }
 
 
-QrCode QrCode::encodeBinary(const vector<uint8_t> &data, Ecc ecl) {
-	vector<QrSegment> segs{QrSegment::makeBytes(data)};
-	return encodeSegments(segs, ecl);
-}
 
 
 QrCode QrCode::encodeSegments(const vector<QrSegment> &segs, Ecc ecl,
 		int minVersion, int maxVersion, int mask, bool boostEcl) {
-	if (!(MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= MAX_VERSION) || mask < -1 || mask > 7)
-		throw std::invalid_argument("Invalid value");
 	
 	// Find the minimal version number to use
 	int version, dataUsedBits;
+	vector<uint8_t> dataCodewordsTemp;
 	for (version = minVersion; ; version++) {
 		int dataCapacityBits = getNumDataCodewords(version, ecl) * 8;  // Number of data bits available
 		dataUsedBits = QrSegment::getTotalBits(segs, version);
 		if (dataUsedBits != -1 && dataUsedBits <= dataCapacityBits)
 			break;  // This version number is found to be suitable
 		if (version >= maxVersion) {  // All versions in the range could not fit the given data
-			std::ostringstream sb;
-			if (dataUsedBits == -1)
-				sb << "Segment too long";
-			else {
-				sb << "Data length = " << dataUsedBits << " bits, ";
-				sb << "Max capacity = " << dataCapacityBits << " bits";
-			}
-			throw data_too_long(sb.str());
+			return QrCode(ERR_VERSION, ecl, dataCodewordsTemp, mask);
 		}
 	}
 	if (dataUsedBits == -1)
-		throw std::logic_error("Assertion error");
+		return QrCode(ERR_VERSION, ecl, dataCodewordsTemp, mask);
 	
 	// Increase the error correction level while the data still fits in the current version number
 	for (Ecc newEcl : vector<Ecc>{Ecc::MEDIUM, Ecc::QUARTILE, Ecc::HIGH}) {  // From low to high
@@ -292,16 +177,16 @@ QrCode QrCode::encodeSegments(const vector<QrSegment> &segs, Ecc ecl,
 		bb.insert(bb.end(), seg.getData().begin(), seg.getData().end());
 	}
 	if (bb.size() != static_cast<unsigned int>(dataUsedBits))
-		throw std::logic_error("Assertion error");
+		return QrCode(ERR_VERSION, ecl, dataCodewordsTemp, mask);
 	
 	// Add terminator and pad up to a byte if applicable
 	size_t dataCapacityBits = static_cast<size_t>(getNumDataCodewords(version, ecl)) * 8;
 	if (bb.size() > dataCapacityBits)
-		throw std::logic_error("Assertion error");
+		return QrCode(ERR_VERSION, ecl, dataCodewordsTemp, mask);
 	bb.appendBits(0, std::min(4, static_cast<int>(dataCapacityBits - bb.size())));
 	bb.appendBits(0, (8 - static_cast<int>(bb.size() % 8)) % 8);
 	if (bb.size() % 8 != 0)
-		throw std::logic_error("Assertion error");
+		return QrCode(ERR_VERSION, ecl, dataCodewordsTemp, mask);
 	
 	// Pad with alternating bytes until data capacity is reached
 	for (uint8_t padByte = 0xEC; bb.size() < dataCapacityBits; padByte ^= 0xEC ^ 0x11)
@@ -319,12 +204,18 @@ QrCode QrCode::encodeSegments(const vector<QrSegment> &segs, Ecc ecl,
 
 QrCode::QrCode(int ver, Ecc ecl, const vector<uint8_t> &dataCodewords, int msk) :
 		// Initialize fields and check arguments
-		version(ver),
+		version(ver), flag(true),
 		errorCorrectionLevel(ecl) {
-	if (ver < MIN_VERSION || ver > MAX_VERSION)
-		throw std::domain_error("Version value out of range");
-	if (msk < -1 || msk > 7)
-		throw std::domain_error("Mask value out of range");
+	if (ver < MIN_VERSION || ver > MAX_VERSION) {
+		flag = false;
+		return;
+	}
+
+	if (msk < -1 || msk > 7) {
+		flag = false;
+		return;
+	}
+
 	size = ver * 4 + 17;
 	size_t sz = static_cast<size_t>(size);
 	modules    = vector<vector<bool> >(sz, vector<bool>(sz));  // Initially all white
@@ -332,33 +223,38 @@ QrCode::QrCode(int ver, Ecc ecl, const vector<uint8_t> &dataCodewords, int msk)
 	
 	// Compute ECC, draw modules
 	drawFunctionPatterns();
+	if (!flag) {
+		clearFunctionPatterns();
+		return;
+	}
+
 	const vector<uint8_t> allCodewords = addEccAndInterleave(dataCodewords);
+	if (!flag){
+		clearFunctionPatterns();
+		return;
+	}
+
 	drawCodewords(allCodewords);
-	
-	// Do masking
-	if (msk == -1) {  // Automatically choose best mask
-		long minPenalty = LONG_MAX;
-		for (int i = 0; i < 8; i++) {
-			applyMask(i);
-			drawFormatBits(i);
-			long penalty = getPenaltyScore();
-			if (penalty < minPenalty) {
-				msk = i;
-				minPenalty = penalty;
-			}
-			applyMask(i);  // Undoes the mask due to XOR
-		}
+	if (!flag) {
+		clearFunctionPatterns();
+		return;
 	}
-	if (msk < 0 || msk > 7)
-		throw std::logic_error("Assertion error");
+
 	this->mask = msk;
 	applyMask(msk);  // Apply the final choice of mask
+	if (!flag) {
+		clearFunctionPatterns();
+		return;
+	}
+
 	drawFormatBits(msk);  // Overwrite old format bits
-	
-	isFunction.clear();
-	isFunction.shrink_to_fit();
+
+	clearFunctionPatterns();
 }
 
+bool QrCode::getFlag() const {
+	return flag;
+}
 
 int QrCode::getVersion() const {
 	return version;
@@ -385,32 +281,6 @@ bool QrCode::getModule(int x, int y) const {
 }
 
 
-std::string QrCode::toSvgString(int border) const {
-	if (border < 0)
-		throw std::domain_error("Border must be non-negative");
-	if (border > INT_MAX / 2 || border * 2 > INT_MAX - size)
-		throw std::overflow_error("Border too large");
-	
-	std::ostringstream sb;
-	sb << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
-	sb << "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n";
-	sb << "<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 ";
-	sb << (size + border * 2) << " " << (size + border * 2) << "\" stroke=\"none\">\n";
-	sb << "\t<rect width=\"100%\" height=\"100%\" fill=\"#FFFFFF\"/>\n";
-	sb << "\t<path d=\"";
-	for (int y = 0; y < size; y++) {
-		for (int x = 0; x < size; x++) {
-			if (getModule(x, y)) {
-				if (x != 0 || y != 0)
-					sb << " ";
-				sb << "M" << (x + border) << "," << (y + border) << "h1v1h-1z";
-			}
-		}
-	}
-	sb << "\" fill=\"#000000\"/>\n";
-	sb << "</svg>\n";
-	return sb.str();
-}
 
 
 void QrCode::drawFunctionPatterns() {
@@ -438,6 +308,10 @@ void QrCode::drawFunctionPatterns() {
 	
 	// Draw configuration data
 	drawFormatBits(0);  // Dummy mask value; overwritten later in the constructor
+	if (!flag) {
+		return;
+	}
+
 	drawVersion();
 }
 
@@ -449,8 +323,10 @@ void QrCode::drawFormatBits(int msk) {
 	for (int i = 0; i < 10; i++)
 		rem = (rem << 1) ^ ((rem >> 9) * 0x537);
 	int bits = (data << 10 | rem) ^ 0x5412;  // uint15
-	if (bits >> 15 != 0)
-		throw std::logic_error("Assertion error");
+	if (bits >> 15 != 0) {
+		flag = false;
+		return;
+	}
 	
 	// Draw first copy
 	for (int i = 0; i <= 5; i++)
@@ -479,8 +355,10 @@ void QrCode::drawVersion() {
 	for (int i = 0; i < 12; i++)
 		rem = (rem << 1) ^ ((rem >> 11) * 0x1F25);
 	long bits = static_cast<long>(version) << 12 | rem;  // uint18
-	if (bits >> 18 != 0)
-		throw std::logic_error("Assertion error");
+	if (bits >> 18 != 0) {
+		flag = false;
+		return;
+	}
 	
 	// Draw two copies
 	for (int i = 0; i < 18; i++) {
@@ -526,9 +404,12 @@ bool QrCode::module(int x, int y) const {
 }
 
 
-vector<uint8_t> QrCode::addEccAndInterleave(const vector<uint8_t> &data) const {
-	if (data.size() != static_cast<unsigned int>(getNumDataCodewords(version, errorCorrectionLevel)))
-		throw std::invalid_argument("Invalid argument");
+vector<uint8_t> QrCode::addEccAndInterleave(const vector<uint8_t> &data)  {
+	vector<uint8_t> result;
+	if (data.size() != static_cast<unsigned int>(getNumDataCodewords(version, errorCorrectionLevel))) {
+		flag = false;
+		return result;
+	}
 	
 	// Calculate parameter numbers
 	int numBlocks = NUM_ERROR_CORRECTION_BLOCKS[static_cast<int>(errorCorrectionLevel)][version];
@@ -540,10 +421,16 @@ vector<uint8_t> QrCode::addEccAndInterleave(const vector<uint8_t> &data) const {
 	// Split data into blocks and append ECC to each block
 	vector<vector<uint8_t> > blocks;
 	const vector<uint8_t> rsDiv = reedSolomonComputeDivisor(blockEccLen);
+	if (!flag) {
+		return result;
+	}
 	for (int i = 0, k = 0; i < numBlocks; i++) {
 		vector<uint8_t> dat(data.cbegin() + k, data.cbegin() + (k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1)));
 		k += static_cast<int>(dat.size());
 		const vector<uint8_t> ecc = reedSolomonComputeRemainder(dat, rsDiv);
+		if (!flag) {
+			return result;
+		}
 		if (i < numShortBlocks)
 			dat.push_back(0);
 		dat.insert(dat.end(), ecc.cbegin(), ecc.cend());
@@ -551,7 +438,6 @@ vector<uint8_t> QrCode::addEccAndInterleave(const vector<uint8_t> &data) const {
 	}
 	
 	// Interleave (not concatenate) the bytes from every block into a single sequence
-	vector<uint8_t> result;
 	for (size_t i = 0; i < blocks.at(0).size(); i++) {
 		for (size_t j = 0; j < blocks.size(); j++) {
 			// Skip the padding byte in short blocks
@@ -560,14 +446,16 @@ vector<uint8_t> QrCode::addEccAndInterleave(const vector<uint8_t> &data) const {
 		}
 	}
 	if (result.size() != static_cast<unsigned int>(rawCodewords))
-		throw std::logic_error("Assertion error");
+		flag = false;
 	return result;
 }
 
 
 void QrCode::drawCodewords(const vector<uint8_t> &data) {
-	if (data.size() != static_cast<unsigned int>(getNumRawDataModules(version) / 8))
-		throw std::invalid_argument("Invalid argument");
+	if (data.size() != static_cast<unsigned int>(getNumRawDataModules(version) / 8)) {
+		flag = false;
+		return;
+	}
 	
 	size_t i = 0;  // Bit index into the data
 	// Do the funny zigzag scan
@@ -588,14 +476,14 @@ void QrCode::drawCodewords(const vector<uint8_t> &data) {
 			}
 		}
 	}
-	if (i != data.size() * 8)
-		throw std::logic_error("Assertion error");
+	if (i != data.size() * 8){
+		flag = false;
+		return;
+	}
 }
 
 
 void QrCode::applyMask(int msk) {
-	if (msk < 0 || msk > 7)
-		throw std::domain_error("Mask value out of range");
 	size_t sz = static_cast<size_t>(size);
 	for (size_t y = 0; y < sz; y++) {
 		for (size_t x = 0; x < sz; x++) {
@@ -609,7 +497,7 @@ void QrCode::applyMask(int msk) {
 				case 5:  invert = x * y % 2 + x * y % 3 == 0;          break;
 				case 6:  invert = (x * y % 2 + x * y % 3) % 2 == 0;    break;
 				case 7:  invert = ((x + y) % 2 + x * y % 3) % 2 == 0;  break;
-				default:  throw std::logic_error("Assertion error");
+				default:  return;
 			}
 			modules.at(y).at(x) = modules.at(y).at(x) ^ (invert & !isFunction.at(y).at(x));
 		}
@@ -617,79 +505,6 @@ void QrCode::applyMask(int msk) {
 }
 
 
-long QrCode::getPenaltyScore() const {
-	long result = 0;
-	
-	// Adjacent modules in row having same color, and finder-like patterns
-	for (int y = 0; y < size; y++) {
-		bool runColor = false;
-		int runX = 0;
-		std::array<int,7> runHistory = {};
-		for (int x = 0; x < size; x++) {
-			if (module(x, y) == runColor) {
-				runX++;
-				if (runX == 5)
-					result += PENALTY_N1;
-				else if (runX > 5)
-					result++;
-			} else {
-				finderPenaltyAddHistory(runX, runHistory);
-				if (!runColor)
-					result += finderPenaltyCountPatterns(runHistory) * PENALTY_N3;
-				runColor = module(x, y);
-				runX = 1;
-			}
-		}
-		result += finderPenaltyTerminateAndCount(runColor, runX, runHistory) * PENALTY_N3;
-	}
-	// Adjacent modules in column having same color, and finder-like patterns
-	for (int x = 0; x < size; x++) {
-		bool runColor = false;
-		int runY = 0;
-		std::array<int,7> runHistory = {};
-		for (int y = 0; y < size; y++) {
-			if (module(x, y) == runColor) {
-				runY++;
-				if (runY == 5)
-					result += PENALTY_N1;
-				else if (runY > 5)
-					result++;
-			} else {
-				finderPenaltyAddHistory(runY, runHistory);
-				if (!runColor)
-					result += finderPenaltyCountPatterns(runHistory) * PENALTY_N3;
-				runColor = module(x, y);
-				runY = 1;
-			}
-		}
-		result += finderPenaltyTerminateAndCount(runColor, runY, runHistory) * PENALTY_N3;
-	}
-	
-	// 2*2 blocks of modules having same color
-	for (int y = 0; y < size - 1; y++) {
-		for (int x = 0; x < size - 1; x++) {
-			bool  color = module(x, y);
-			if (  color == module(x + 1, y) &&
-			      color == module(x, y + 1) &&
-			      color == module(x + 1, y + 1))
-				result += PENALTY_N2;
-		}
-	}
-	
-	// Balance of black and white modules
-	int black = 0;
-	for (const vector<bool> &row : modules) {
-		for (bool color : row) {
-			if (color)
-				black++;
-		}
-	}
-	int total = size * size;  // Note that size is odd, so black/total != 1/2
-	// Compute the smallest integer k >= 0 such that (45-5k)% <= black/total <= (55+5k)%
-	int k = static_cast<int>((std::abs(black * 20L - total * 10L) + total - 1) / total) - 1;
-	result += k * PENALTY_N4;
-	return result;
-}
 
 
 vector<int> QrCode::getAlignmentPatternPositions() const {
@@ -709,8 +524,6 @@ vector<int> QrCode::getAlignmentPatternPositions() const {
 
 
 int QrCode::getNumRawDataModules(int ver) {
-	if (ver < MIN_VERSION || ver > MAX_VERSION)
-		throw std::domain_error("Version number out of range");
 	int result = (16 * ver + 128) * ver + 64;
 	if (ver >= 2) {
 		int numAlign = ver / 7 + 2;
@@ -718,8 +531,6 @@ int QrCode::getNumRawDataModules(int ver) {
 		if (ver >= 7)
 			result -= 36;
 	}
-	if (!(208 <= result && result <= 29648))
-		throw std::logic_error("Assertion error");
 	return result;
 }
 
@@ -732,8 +543,6 @@ int QrCode::getNumDataCodewords(int ver, Ecc ecl) {
 
 
 vector<uint8_t> QrCode::reedSolomonComputeDivisor(int degree) {
-	if (degree < 1 || degree > 255)
-		throw std::domain_error("Degree out of range");
 	// Polynomial coefficients are stored from highest to lowest power, excluding the leading term which is always 1.
 	// For example the polynomial x^3 + 255x^2 + 8x + 93 is stored as the uint8 array {255, 8, 93}.
 	vector<uint8_t> result(static_cast<size_t>(degree));
@@ -747,10 +556,16 @@ vector<uint8_t> QrCode::reedSolomonComputeDivisor(int degree) {
 		// Multiply the current product by (x - r^i)
 		for (size_t j = 0; j < result.size(); j++) {
 			result.at(j) = reedSolomonMultiply(result.at(j), root);
+			if (!flag) {
+				return result;
+			}
 			if (j + 1 < result.size())
 				result.at(j) ^= result.at(j + 1);
 		}
 		root = reedSolomonMultiply(root, 0x02);
+		if (!flag) {
+			return result;
+		}
 	}
 	return result;
 }
@@ -762,8 +577,13 @@ vector<uint8_t> QrCode::reedSolomonComputeRemainder(const vector<uint8_t> &data,
 		uint8_t factor = b ^ result.at(0);
 		result.erase(result.begin());
 		result.push_back(0);
-		for (size_t i = 0; i < result.size(); i++)
+		for (size_t i = 0; i < result.size(); i++) {
 			result.at(i) ^= reedSolomonMultiply(divisor.at(i), factor);
+			if (!flag) {
+				return result;
+			}
+		}
+
 	}
 	return result;
 }
@@ -777,74 +597,43 @@ uint8_t QrCode::reedSolomonMultiply(uint8_t x, uint8_t y) {
 		z ^= ((y >> i) & 1) * x;
 	}
 	if (z >> 8 != 0)
-		throw std::logic_error("Assertion error");
+		flag = false;
 	return static_cast<uint8_t>(z);
 }
 
 
-int QrCode::finderPenaltyCountPatterns(const std::array<int,7> &runHistory) const {
-	int n = runHistory.at(1);
-	if (n > size * 3)
-		throw std::logic_error("Assertion error");
-	bool core = n > 0 && runHistory.at(2) == n && runHistory.at(3) == n * 3 && runHistory.at(4) == n && runHistory.at(5) == n;
-	return (core && runHistory.at(0) >= n * 4 && runHistory.at(6) >= n ? 1 : 0)
-	     + (core && runHistory.at(6) >= n * 4 && runHistory.at(0) >= n ? 1 : 0);
-}
-
-
-int QrCode::finderPenaltyTerminateAndCount(bool currentRunColor, int currentRunLength, std::array<int,7> &runHistory) const {
-	if (currentRunColor) {  // Terminate black run
-		finderPenaltyAddHistory(currentRunLength, runHistory);
-		currentRunLength = 0;
-	}
-	currentRunLength += size;  // Add white border to final run
-	finderPenaltyAddHistory(currentRunLength, runHistory);
-	return finderPenaltyCountPatterns(runHistory);
-}
-
 
-void QrCode::finderPenaltyAddHistory(int currentRunLength, std::array<int,7> &runHistory) const {
-	if (runHistory.at(0) == 0)
-		currentRunLength += size;  // Add white border to initial run
-	std::copy_backward(runHistory.cbegin(), runHistory.cend() - 1, runHistory.end());
-	runHistory.at(0) = currentRunLength;
+void QrCode::clearFunctionPatterns()
+{
+	isFunction.clear();
+	isFunction.shrink_to_fit();
 }
 
-
 bool QrCode::getBit(long x, int i) {
 	return ((x >> i) & 1) != 0;
 }
 
 
-/*---- Tables of constants ----*/
 
-const int QrCode::PENALTY_N1 =  3;
-const int QrCode::PENALTY_N2 =  3;
-const int QrCode::PENALTY_N3 = 40;
-const int QrCode::PENALTY_N4 = 10;
-
-
-const int8_t QrCode::ECC_CODEWORDS_PER_BLOCK[4][41] = {
+const int8_t QrCode::ECC_CODEWORDS_PER_BLOCK[4][11] = {
 	// Version: (note that index 0 is for padding, and is set to an illegal value)
 	//0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level
-	{-1,  7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},  // Low
-	{-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},  // Medium
-	{-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},  // Quartile
-	{-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},  // High
+	{-1,  7, 10, 15, 20, 26, 18, 20, 24, 30, 18},  // Low
+	{-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26},  // Medium
+	{-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24},  // Quartile
+	{-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28},  // High
 };
 
-const int8_t QrCode::NUM_ERROR_CORRECTION_BLOCKS[4][41] = {
+const int8_t QrCode::NUM_ERROR_CORRECTION_BLOCKS[4][11] = {
 	// Version: (note that index 0 is for padding, and is set to an illegal value)
 	//0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level
-	{-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4,  4,  4,  4,  4,  6,  6,  6,  6,  7,  8,  8,  9,  9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25},  // Low
-	{-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5,  5,  8,  9,  9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49},  // Medium
-	{-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8,  8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68},  // Quartile
-	{-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81},  // High
+	{-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4},  // Low
+	{-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5},  // Medium
+	{-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8},  // Quartile
+	{-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8},  // High
 };
 
 
-data_too_long::data_too_long(const std::string &msg) :
-	std::length_error(msg) {}
 
 
 
@@ -854,7 +643,7 @@ BitBuffer::BitBuffer()
 
 void BitBuffer::appendBits(std::uint32_t val, int len) {
 	if (len < 0 || len > 31 || val >> len != 0)
-		throw std::domain_error("Value out of range");
+		return;
 	for (int i = len - 1; i >= 0; i--)  // Append bit by bit
 		this->push_back(((val >> i) & 1) != 0);
 }
diff --git a/cpp/QrCode.hpp b/cpp/QrCode.hpp
index 7341e41..20dbbf4 100755
--- a/cpp/QrCode.hpp
+++ b/cpp/QrCode.hpp
@@ -21,7 +21,8 @@
  *   Software.
  */
 
-#pragma once
+#ifndef QRCODEEGEN_H
+#define QRCODEEGEN_H
 
 #include <array>
 #include <cstdint>
@@ -52,13 +53,6 @@ class QrSegment final {
 	 */
 	public: class Mode final {
 		
-		/*-- Constants --*/
-		
-		public: static const Mode NUMERIC;
-		public: static const Mode ALPHANUMERIC;
-		public: static const Mode BYTE;
-		public: static const Mode KANJI;
-		public: static const Mode ECI;
 		
 		
 		/*-- Fields --*/
@@ -72,7 +66,7 @@ class QrSegment final {
 		
 		/*-- Constructor --*/
 		
-		private: Mode(int mode, int cc0, int cc1, int cc2);
+		public: Mode(int mode, int cc0, int cc1, int cc2);
 		
 		
 		/*-- Methods --*/
@@ -99,22 +93,11 @@ class QrSegment final {
 	 * byte mode. All input byte vectors are acceptable. Any text string
 	 * can be converted to UTF-8 bytes and encoded as a byte mode segment.
 	 */
-	public: static QrSegment makeBytes(const std::vector<std::uint8_t> &data);
+	private: static QrSegment makeBytes(const std::vector<std::uint8_t> &data);
 	
 	
-	/* 
-	 * Returns a segment representing the given string of decimal digits encoded in numeric mode.
-	 */
-	public: static QrSegment makeNumeric(const char *digits);
 	
 	
-	/* 
-	 * Returns a segment representing the given text string encoded in alphanumeric mode.
-	 * The characters allowed are: 0 to 9, A to Z (uppercase only), space,
-	 * dollar, percent, asterisk, plus, hyphen, period, slash, colon.
-	 */
-	public: static QrSegment makeAlphanumeric(const char *text);
-	
 	
 	/* 
 	 * Returns a list of zero or more segments to represent the given text string. The result
@@ -123,29 +106,6 @@ class QrSegment final {
 	public: static std::vector<QrSegment> makeSegments(const char *text);
 	
 	
-	/* 
-	 * Returns a segment representing an Extended Channel Interpretation
-	 * (ECI) designator with the given assignment value.
-	 */
-	public: static QrSegment makeEci(long assignVal);
-	
-	
-	/*---- Public static helper functions ----*/
-	
-	/* 
-	 * Tests whether the given string can be encoded as a segment in alphanumeric mode.
-	 * A string is encodable iff each character is in the following set: 0 to 9, A to Z
-	 * (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.
-	 */
-	public: static bool isAlphanumeric(const char *text);
-	
-	
-	/* 
-	 * Tests whether the given string can be encoded as a segment in numeric mode.
-	 * A string is encodable iff each character is in the range 0 to 9.
-	 */
-	public: static bool isNumeric(const char *text);
-	
 	
 	
 	/*---- Instance fields ----*/
@@ -165,13 +125,6 @@ class QrSegment final {
 	
 	/*---- Constructors (low level) ----*/
 	
-	/* 
-	 * Creates a new QR Code segment with the given attributes and data.
-	 * The character count (numCh) must agree with the mode and the bit buffer length,
-	 * but the constraint isn't checked. The given bit buffer is copied and stored.
-	 */
-	public: QrSegment(Mode md, int numCh, const std::vector<bool> &dt);
-	
 	
 	/* 
 	 * Creates a new QR Code segment with the given parameters and data.
@@ -207,12 +160,6 @@ class QrSegment final {
 	public: static int getTotalBits(const std::vector<QrSegment> &segs, int version);
 	
 	
-	/*---- Private constant ----*/
-	
-	/* The set of all legal characters in alphanumeric mode, where
-	 * each character value maps to the index in the string. */
-	private: static const char *ALPHANUMERIC_CHARSET;
-	
 };
 
 
@@ -265,13 +212,6 @@ class QrCode final {
 	public: static QrCode encodeText(const char *text, Ecc ecl);
 	
 	
-	/* 
-	 * Returns a QR Code representing the given binary data at the given error correction level.
-	 * This function always encodes using the binary segment mode, not any text mode. The maximum number of
-	 * bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.
-	 * The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.
-	 */
-	public: static QrCode encodeBinary(const std::vector<std::uint8_t> &data, Ecc ecl);
 	
 	
 	/*---- Static factory functions (mid level) ----*/
@@ -287,7 +227,7 @@ class QrCode final {
 	 * between modes (such as alphanumeric and byte) to encode text in less space.
 	 * This is a mid-level API; the high-level API is encodeText() and encodeBinary().
 	 */
-	public: static QrCode encodeSegments(const std::vector<QrSegment> &segs, Ecc ecl,
+	private: static QrCode encodeSegments(const std::vector<QrSegment> &segs, Ecc ecl,
 		int minVersion=1, int maxVersion=40, int mask=-1, bool boostEcl=true);  // All optional parameters
 	
 	
@@ -321,7 +261,9 @@ class QrCode final {
 	// Indicates function modules that are not subjected to masking. Discarded when constructor finishes.
 	private: std::vector<std::vector<bool> > isFunction;
 	
-	
+	/* QR Code Generation Success Flag.
+    * This Success :true */
+	private: bool flag;
 	
 	/*---- Constructor (low level) ----*/
 	
@@ -331,12 +273,16 @@ class QrCode final {
 	 * This is a low-level API that most users should not use directly.
 	 * A mid-level API is the encodeSegments() function.
 	 */
-	public: QrCode(int ver, Ecc ecl, const std::vector<std::uint8_t> &dataCodewords, int msk);
+	private: QrCode(int ver, Ecc ecl, const std::vector<std::uint8_t> &dataCodewords, int msk);
 	
 	
 	
 	/*---- Public instance methods ----*/
-	
+	/*
+	 * Returns this QR Code's version, in the range [1, 40].
+	 */
+	public: bool getFlag() const;
+
 	/* 
 	 * Returns this QR Code's version, in the range [1, 40].
 	 */
@@ -369,11 +315,7 @@ class QrCode final {
 	public: bool getModule(int x, int y) const;
 	
 	
-	/* 
-	 * Returns a string of SVG code for an image depicting this QR Code, with the given number
-	 * of border modules. The string always uses Unix newlines (\n), regardless of the platform.
-	 */
-	public: std::string toSvgString(int border) const;
+
 	
 	
 	
@@ -416,7 +358,7 @@ class QrCode final {
 	
 	// Returns a new byte string representing the given data with the appropriate error correction
 	// codewords appended to it, based on this object's version and error correction level.
-	private: std::vector<std::uint8_t> addEccAndInterleave(const std::vector<std::uint8_t> &data) const;
+	private: std::vector<std::uint8_t> addEccAndInterleave(const std::vector<std::uint8_t> &data);
 	
 	
 	// Draws the given sequence of 8-bit codewords (data and error correction) onto the entire
@@ -432,9 +374,7 @@ class QrCode final {
 	private: void applyMask(int msk);
 	
 	
-	// Calculates and returns the penalty score based on state of this QR Code's current modules.
-	// This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.
-	private: long getPenaltyScore() const;
+
 	
 	
 	
@@ -460,74 +400,40 @@ class QrCode final {
 	
 	// Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be
 	// implemented as a lookup table over all possible parameter values, instead of as an algorithm.
-	private: static std::vector<std::uint8_t> reedSolomonComputeDivisor(int degree);
+	private:  std::vector<std::uint8_t> reedSolomonComputeDivisor(int degree);
 	
 	
 	// Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.
-	private: static std::vector<std::uint8_t> reedSolomonComputeRemainder(const std::vector<std::uint8_t> &data, const std::vector<std::uint8_t> &divisor);
+	private:  std::vector<std::uint8_t> reedSolomonComputeRemainder(const std::vector<std::uint8_t> &data, const std::vector<std::uint8_t> &divisor);
 	
 	
 	// Returns the product of the two given field elements modulo GF(2^8/0x11D).
 	// All inputs are valid. This could be implemented as a 256*256 lookup table.
-	private: static std::uint8_t reedSolomonMultiply(std::uint8_t x, std::uint8_t y);
-	
-	
-	// Can only be called immediately after a white run is added, and
-	// returns either 0, 1, or 2. A helper function for getPenaltyScore().
-	private: int finderPenaltyCountPatterns(const std::array<int,7> &runHistory) const;
-	
-	
-	// Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().
-	private: int finderPenaltyTerminateAndCount(bool currentRunColor, int currentRunLength, std::array<int,7> &runHistory) const;
+	private:  std::uint8_t reedSolomonMultiply(std::uint8_t x, std::uint8_t y);
 	
 	
-	// Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().
-	private: void finderPenaltyAddHistory(int currentRunLength, std::array<int,7> &runHistory) const;
-	
+	// clear Function.
+	private: void clearFunctionPatterns();
 	
 	// Returns true iff the i'th bit of x is set to 1.
 	private: static bool getBit(long x, int i);
 	
 	
 	/*---- Constants and tables ----*/
-	
+	// The error version number supported in the QR Code Model 2 standard.
+	private: static constexpr int ERR_VERSION = 0;
+
 	// The minimum version number supported in the QR Code Model 2 standard.
-	public: static constexpr int MIN_VERSION =  1;
+	private: static constexpr int MIN_VERSION =  1;
 	
 	// The maximum version number supported in the QR Code Model 2 standard.
-	public: static constexpr int MAX_VERSION = 40;
+   private: static constexpr int MAX_VERSION = 10;
 	
 	
-	// For use in getPenaltyScore(), when evaluating which mask is best.
-	private: static const int PENALTY_N1;
-	private: static const int PENALTY_N2;
-	private: static const int PENALTY_N3;
-	private: static const int PENALTY_N4;
 	
 	
-	private: static const std::int8_t ECC_CODEWORDS_PER_BLOCK[4][41];
-	private: static const std::int8_t NUM_ERROR_CORRECTION_BLOCKS[4][41];
-	
-};
-
-
-
-/*---- Public exception class ----*/
-
-/* 
- * Thrown when the supplied data does not fit any QR Code version. Ways to handle this exception include:
- * - Decrease the error correction level if it was greater than Ecc::LOW.
- * - If the encodeSegments() function was called with a maxVersion argument, then increase
- *   it if it was less than QrCode::MAX_VERSION. (This advice does not apply to the other
- *   factory functions because they search all versions up to QrCode::MAX_VERSION.)
- * - Split the text data into better or optimal segments in order to reduce the number of bits required.
- * - Change the text or binary data to be shorter.
- * - Change the text to fit the character set of a particular segment mode (e.g. alphanumeric).
- * - Propagate the error upward to the caller/user.
- */
-class data_too_long : public std::length_error {
-	
-	public: explicit data_too_long(const std::string &msg);
+	private: static const std::int8_t ECC_CODEWORDS_PER_BLOCK[4][11];
+	private: static const std::int8_t NUM_ERROR_CORRECTION_BLOCKS[4][11];
 	
 };
 
@@ -554,3 +460,4 @@ class BitBuffer final : public std::vector<bool> {
 };
 
 }
+#endif // QRCODEEGEN_H
\ No newline at end of file
